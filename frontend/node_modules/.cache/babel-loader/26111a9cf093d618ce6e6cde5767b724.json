{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport cartAPI from \"../../mocks/cart\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cartItems: JSON.parse(localStorage.getItem(\"cartItems\")) || [],\n    shippingAddress: {}\n  },\n  reducers: {\n    setCartItems(state, action) {\n      state.cartItems = action.payload;\n      console.log(state.cartItems);\n      localStorage.setItem(\"cartItems\", JSON.stringify(action.payload));\n    },\n    removeCartItem(state, action) {\n      const id = action.payload;\n      state.cartItems = state.cartItems.filter(x => x._id !== id);\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    setShippingAddress(state, action) {\n      state.shippingAddress = action.payload;\n      localStorage.setItem(\"shippingAddress\", JSON.stringify(action.payload));\n    },\n    setPaymentMethod(state, action) {\n      state.paymentMethod = action.payload;\n      localStorage.setItem(\"paymentMethod\", JSON.stringify(action.payload));\n    }\n  }\n});\nexport const {\n  setCartItems,\n  removeCartItem,\n  setShippingAddress,\n  setPaymentMethod\n} = cartSlice.actions;\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n  try {\n    const {\n      cartItems\n    } = getState().cart;\n    const product = await cartAPI.fetchProduct(id);\n    let existingItemIndex = -1;\n    for (let i = 0; i < cartItems.length; i++) {\n      if (cartItems[i]._id === id) {\n        existingItemIndex = i;\n        break;\n      }\n    }\n    if (existingItemIndex !== -1) {\n      const updatedCartItems = [...cartItems];\n      updatedCartItems[existingItemIndex].qty += qty;\n      dispatch(setCartItems(updatedCartItems));\n    } else {\n      dispatch(setCartItems([...cartItems, {\n        ...product,\n        qty\n      }]));\n    }\n  } catch (error) {\n    console.log(\"Erro ao adicionar item ao carrinho:\", error);\n  }\n};\nexport const removeFromCart = id => (dispatch, getState) => {\n  try {\n    dispatch(removeCartItem(id));\n  } catch (error) {\n    console.log(\"Erro ao remover item do carrinho:\", error);\n  }\n};\nexport const saveShippingAddress = data => dispatch => {\n  dispatch(setShippingAddress(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch(setPaymentMethod(data));\n};\nexport const {\n  reducer\n} = cartSlice;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartAPI","cartSlice","name","initialState","cartItems","JSON","parse","localStorage","getItem","shippingAddress","reducers","setCartItems","state","action","payload","console","log","setItem","stringify","removeCartItem","id","filter","x","_id","setShippingAddress","setPaymentMethod","paymentMethod","actions","addToCart","qty","dispatch","getState","cart","product","fetchProduct","existingItemIndex","i","length","updatedCartItems","error","removeFromCart","saveShippingAddress","data","savePaymentMethod","reducer"],"sources":["/home/pedrov12/Documentos/GitHub/sistemas-web-templage/frontend/src/redux/slices/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport cartAPI from \"../../mocks/cart\";\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cartItems: JSON.parse(localStorage.getItem(\"cartItems\")) || [],\n    shippingAddress: {},\n  },\n  reducers: {\n    setCartItems(state, action) {\n      state.cartItems = action.payload;\n      console.log(state.cartItems)\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(action.payload));\n    },\n    removeCartItem(state, action) {\n      const id = action.payload;\n      state.cartItems = state.cartItems.filter((x) => x._id !== id);\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    \n    setShippingAddress(state, action) {\n      state.shippingAddress = action.payload;\n      localStorage.setItem(\"shippingAddress\", JSON.stringify(action.payload));\n    },\n    setPaymentMethod(state, action) {\n      state.paymentMethod = action.payload;\n      localStorage.setItem(\"paymentMethod\", JSON.stringify(action.payload));\n    },\n  },\n});\n\nexport const {\n  setCartItems,\n  removeCartItem,\n  setShippingAddress,\n  setPaymentMethod,\n} = cartSlice.actions;\n\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n  try {\n    const { cartItems } = getState().cart;\n    const product = await cartAPI.fetchProduct(id);\n\n    let existingItemIndex = -1;\n\n    for (let i = 0; i < cartItems.length; i++) {\n      if (cartItems[i]._id === id) {\n        existingItemIndex = i;\n        break;\n      }\n    }\n\n    if (existingItemIndex !== -1) {\n     \n      const updatedCartItems = [...cartItems];\n      updatedCartItems[existingItemIndex].qty += qty;\n      dispatch(setCartItems(updatedCartItems));\n    } else {\n      \n      dispatch(setCartItems([...cartItems, { ...product, qty }]));\n    }\n  } catch (error) {\n    console.log(\"Erro ao adicionar item ao carrinho:\", error);\n  }\n};\n\nexport const removeFromCart = (id) => (dispatch, getState) => {\n  try {\n    dispatch(removeCartItem(id));\n  } catch (error) {\n    console.log(\"Erro ao remover item do carrinho:\", error);\n  }\n};\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n  dispatch(setShippingAddress(data));\n};\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n  dispatch(setPaymentMethod(data));\n};\n\nexport const { reducer } = cartSlice;\nexport default cartSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}